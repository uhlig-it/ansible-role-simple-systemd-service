- name: Define program location
  set_fact:
    program_location: "/usr/local/bin/{{ program.name }}"

- name: Program binary is present and up-to-date (copied from controlling machine)
  copy:
    src: "{{ program.binary }}"
    dest: "{{ program_location }}"
    mode: "0755"
  when: not program["binary"].startswith("http")
  register: program_copied
  tags: [ copy, binary ]

# TODO: handle archives where the binary is in a subdirectory
# TODO: handle URLs that are a binary (without being in an archive)
- name: Program binary is present and up-to-date (fetched from remote)
  ansible.builtin.unarchive:
    src: "{{ program.binary }}"
    dest: /usr/local/bin
    remote_src: yes
  when: program["binary"].startswith("http")
  register: program_downloaded
  tags: [ binary, remote, archive ]

- name: Config file is present
  template:
    src: program.conf.j2
    dest: "/etc/{{ program.name }}.conf"
    mode: "0664"
  register: config_rendered
  when: program["environment"] is defined and program.environment
  tags: [ systemd, config ]

- name: Systemd service is present
  template:
    src: service.j2
    dest: "/etc/systemd/system/{{ program.name }}.service"
    mode: "0664"
  register: service_rendered
  tags: [ systemd, service ]

- name: Service is enabled and started
  systemd:
    name: "{{ program.name }}.service"
    state: started
    enabled: true
    daemon_reload: true
  when: not (program_copied.changed and program_downloaded.changed)
  tags: [ systemd, service ]

- name: Service is enabled and restarted
  systemd:
    name: "{{ program.name }}.service"
    state: restarted
    enabled: true
    daemon_reload: true
  when: program_copied.changed or program_downloaded.changed or config_rendered.changed
  tags: [ systemd, service ]

- name: Systemd timer is present
  template:
    src: timer.j2
    dest: "/etc/systemd/system/{{ program.name }}.timer"
    mode: "0664"
  when: program["timer"] is defined and (program["timer"] | length > 0)
  tags: [ systemd, timer ]

- name: Timer is started and enabled
  systemd:
    name: "{{ program.name }}.timer"
    state: started
    enabled: true
    daemon_reload: true
  when: program["timer"] is defined and (program["timer"] | length > 0)
  tags: [ systemd, timer ]

- include: deployment_event.yml
  when: deployment_event_url is defined and (deployment_event_url | length > 0)

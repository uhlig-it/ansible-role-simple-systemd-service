#
# Create the service as user service (rather than a system service)
# https://serverfault.com/a/841150
#
- name: runtime_user exists
  ansible.builtin.user:
    name: "{{ program.runtime_user }}"
    shell: /bin/zsh
    state: present
  register: runtime_user_registered
  tags: [ user, home, zsh ]

# TODO Is this really needed?
#- name: runtime_user can connect to DBUS in order to interact with user service
#  ansible.builtin.lineinfile:
#    path: "{{ runtime_user_registered.home }}/.zshenv"
#    create: true
#    line: "{{ item }}"
#  with_items:
#    - export XDG_RUNTIME_DIR="/run/user/$UID"
#    - export DBUS_SESSION_BUS_ADDRESS="unix:path=${XDG_RUNTIME_DIR}/bus"
#  become_user: "{{ program.runtime_user }}"
#  tags: [ home, zsh, environment, dbus ]

- name: ~runtime_user/bin directory exists
  ansible.builtin.file:
    path: "{{ runtime_user_registered.home }}/bin"
    state: directory
    mode: '0755'
  become_user: "{{ program.runtime_user }}"
  tags: [ home, folder, binary ]

- name: Define program location
  set_fact:
    program_location: "{{ runtime_user_registered.home }}/bin/{{ program.name }}"

- name: Program binary is present and up-to-date
  ansible.builtin.copy:
    src: "{{ program.binary }}"
    dest: "{{ program_location }}"
    mode: "0755"
  register: program_copied
  become_user: "{{ program.runtime_user }}"
  tags: [ copy, binary ]

- name: Service directory exists
  ansible.builtin.file:
    path: "{{ runtime_user_registered.home }}/.config/systemd/user"
    state: directory
    mode: '0755'
  become_user: "{{ program.runtime_user }}"

- name: User service is present
  ansible.builtin.template:
    src: service.j2
    dest: "{{ runtime_user_registered.home }}/.config/systemd/user/{{ program.name }}.service"
    mode: "0664"
  register: service_rendered
  tags: [ systemd, timer ]
  become_user: "{{ program.runtime_user }}"

- name: Check if runtime user is lingering
  stat:
    path: "/var/lib/systemd/linger/{{ program.runtime_user }}"
  register: user_lingering

- name: Lingering is enabled
  command: "loginctl enable-linger {{ program.runtime_user }}"
  when: not user_lingering.stat.exists

- name: Service file is reloaded
  ansible.builtin.systemd:
    name: "{{ program.name }}.service"
    scope: user
    daemon_reload: true
  when: service_rendered.changed
  become_user: "{{ program.runtime_user }}"
  tags: [ systemd, service ]

- name: User service is enabled and started
  ansible.builtin.systemd:
    name: "{{ program.name }}.service"
    scope: user
    state: started
    enabled: true
  when: program_copied.changed
  become_user: "{{ program.runtime_user }}"
  tags: [ systemd, service ]

- name: User service is enabled and restarted
  ansible.builtin.systemd:
    name: "{{ program.name }}.service"
    scope: user
    state: restarted
    enabled: true
  when: not program_copied.changed
  become_user: "{{ program.runtime_user }}"
  tags: [ systemd, service ]

- name: Systemd timer is present
  ansible.builtin.template:
    src: timer.j2
    dest: "{{ runtime_user_registered.home }}/.config/systemd/user/{{ program.name }}.timer"
    mode: "0664"
  when: program["timer"] is defined and (program["timer"] | length > 0)
  become_user: "{{ program.runtime_user }}"
  tags: [ systemd, timer ]

- name: Timer is started and enabled
  ansible.builtin.systemd:
    name: "{{ program.name }}.timer"
    scope: user
    state: started
    enabled: true
    daemon_reload: true
  when: program["timer"] is defined and (program["timer"] | length > 0)
  become_user: "{{ program.runtime_user }}"
  tags: [ systemd, timer ]

- include: deployment_event.yml
  when: deployment_event_url is defined and (deployment_event_url | length > 0)

require 'pathname'

Vagrant.configure('2') do |config|
  config.vm.define('influxdb') do |machine|
    machine.vm.box = 'debian/buster64'
    machine.vm.hostname = 'influxdb'
    machine.vm.network 'private_network', type: 'dhcp'

    # make VMs known to each other by name
    # https://stackoverflow.com/a/30780347/3212907
    machine.vm.provision 'hostname-resolution', type: 'shell' do |script|
      script.env = { DEBIAN_FRONTEND: 'noninteractive' }
      script.inline = 'apt-get --yes install avahi-daemon libnss-mdns'
    end

    machine.vm.provision 'ansible' do |ansible|
      ansible.playbook = 'support/influxdb.yml'
      ansible.compatibility_mode = '2.0'
      ansible.extra_vars = {
        ansible_python_interpreter: '/usr/bin/python3'
      }
    end
  end

  debian = %w(stretch buster).map { |b| "debian/#{b}64" }
  ubuntu = %w(bionic).map { |b| "ubuntu/#{b}64" }
  other = %w(generic/ubuntu2004)

  Pathname.glob('test-*').product(debian + ubuntu + other).each do |test_dir, box|
    test_name = test_dir.to_s
    family, flavour = box.split('/')
    vm_name = [test_name, flavour].join('-')

    config.vm.define(vm_name) do |machine|
      machine.vm.box = box
      machine.vm.hostname = vm_name
      machine.vm.network 'private_network', type: 'dhcp'

      machine.vm.provision 'hostname-resolution', type: 'shell' do |script|
        script.env = { DEBIAN_FRONTEND: 'noninteractive' }
        script.inline = 'apt-get --yes install avahi-daemon libnss-mdns'
      end

      machine.vm.provision 'ansible' do |ansible|
        ansible.playbook = (test_dir / 'playbook.yml').to_s
        ansible.galaxy_roles_path = '../..'
        ansible.compatibility_mode = '2.0'

        extra_vars = {}
        extra_vars[:ansible_python_interpreter] = '/usr/bin/python3'
        extra_vars[:influxdb_url] = 'http://influxdb.local:8086/playbook-tests' if test_name == 'influxdb'
        ansible.extra_vars = extra_vars
      end

      test_script = test_dir / 'run'

      if test_script.exist?
        machine.vm.provision 'test-prereqs', type: 'shell' do |script|
          script.env = { DEBIAN_FRONTEND: 'noninteractive' }
          script.inline = 'apt-get update && apt-get --yes install curl jq'
        end

        machine.vm.provision 'run-tests', type: 'shell', path: test_script.to_s, privileged: false
      end
    end
  end
end
